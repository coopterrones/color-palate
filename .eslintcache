[{"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/index.js":"1","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/App/index.js":"2","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/apiCalls.js":"3","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/ColorCard/index.js":"4","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/CardController/index.js":"5","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/RandomizerButton/index.js":"6","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/AddMyOwnMyColors/index.js":"7","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/SavePaletteForm/SavePaletteForm.js":"8","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/User/index.js":"9","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/FavoriteCard/index.js":"10"},{"size":283,"mtime":1611017021247,"results":"11","hashOfConfig":"12"},{"size":4619,"mtime":1611015965385,"results":"13","hashOfConfig":"12"},{"size":1060,"mtime":1610820534749,"results":"14","hashOfConfig":"12"},{"size":1549,"mtime":1611017458019,"results":"15","hashOfConfig":"12"},{"size":1940,"mtime":1611016884523,"results":"16","hashOfConfig":"12"},{"size":273,"mtime":1610951622321,"results":"17","hashOfConfig":"12"},{"size":281,"mtime":1610844126504,"results":"18","hashOfConfig":"12"},{"size":1544,"mtime":1611016945960,"results":"19","hashOfConfig":"12"},{"size":592,"mtime":1611005729072,"results":"20","hashOfConfig":"12"},{"size":992,"mtime":1611005729071,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ln82ec",{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/App/index.js",["45","46","47","48"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.scss\";\nimport { apiCalls } from \"../../apiCalls\";\nimport CardController from \"../CardController\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport RandomizerButton from \"../RandomizerButton\";\nimport AddMyOwnColors from \"../AddMyOwnMyColors/index.js\";\nimport SavePaletteForm from \"../SavePaletteForm/SavePaletteForm\";\nimport User from \"../../Components/User/index\";\n\nconst App = () => {\n  const [rgbValues, setRgbValues] = useState(null);\n  const [hexCodes, setHexCodes] = useState(null);\n  const [userInputs, setUserInputs] = useState(null);\n  const [colorInputsToggle, setColorInputsToggle] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [showUserForm, setShowUserForm] = useState(false);\n  const [userFavorites, setUserFavorites] = useState([]);\n  const [viewFavorites, setViewFavorites] = useState(false);\n\n  const getColors = () => {\n    apiCalls\n      .getRandomPalette()\n      .then((data) => {\n        setRgbValues(data);\n        rgbToHex(data);\n        setUserInputs(data);\n      })\n      .catch((err) => setError(err.message));\n  };\n\n  const getColorsWithInput = (input) => {\n    let colors = [[...input], \"N\", \"N\", \"N\"];\n    apiCalls.getRandomPaletteFromInput(colors).then((data) => {\n      setRgbValues(data);\n      rgbToHex(data);\n    });\n  };\n\n  function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  const rgbToHex = (data) => {\n    const hexCodes = data.map((color) => {\n      const r = color[0];\n      const g = color[1];\n      const b = color[2];\n\n      return `#${componentToHex(r).toUpperCase()}${componentToHex(\n        g\n      ).toUpperCase()}${componentToHex(b).toUpperCase()}`;\n    });\n    setHexCodes(hexCodes);\n  };\n\n  const toggleColorInputs = () => {\n    setColorInputsToggle(!colorInputsToggle);\n  };\n\n  const submitColorInput = (input) => {\n    let validRgb;\n    const rgbSplit = input.split(\",\");\n    const rgbFormat = rgbSplit.map((value) => {\n      return parseInt(value);\n    });\n    if (\n      rgbFormat.length === 3 &&\n      rgbFormat[0] <= 255 &&\n      rgbFormat[1] <= 255 &&\n      rgbFormat[2] <= 255 &&\n      rgbFormat[0] >= 0 &&\n      rgbFormat[1] >= 0 &&\n      rgbFormat[2] >= 0\n    ) {\n      validRgb = true;\n    }\n\n    if (validRgb) {\n      randomizePaletteWithInput(rgbFormat);\n    }\n  };\n\n  const randomizePalette = () => {\n    getColors();\n  };\n\n  const randomizePaletteWithInput = (input) => {\n    getColorsWithInput(input);\n  };\n\n  const displaySavePaletteForm = () => {\n    setShowUserForm(true);\n  };\n\n  const savePalette = (paletteName) => {\n    if (userFavorites.length) {\n      setUserFavorites([\n        ...userFavorites,\n        {\n          name: paletteName,\n          values: [userInputs],\n          favHexCodes: hexCodes,\n        },\n      ]);\n    } else {\n      setUserFavorites([\n        { name: paletteName, values: [userInputs], favHexCodes: hexCodes },\n      ]);\n    }\n    setShowUserForm(false);\n  };\n\n  useEffect(() => getColors(), []);\n\n  return (\n    <Router>\n      <main className=\"App\">\n        <h1>Dream Themes</h1>\n        <Link to={viewFavorites ? \"/\" : \"/user-favorites\"}>\n          <h3\n            className=\"user-nav-button\"\n            onClick={() => setViewFavorites((prevStatus) => !prevStatus)}\n          >\n            {viewFavorites ? \"Home\" : \"Saved Palettes\"}\n          </h3>\n        </Link>\n        {rgbValues && hexCodes && (\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <Fragment>\n                <CardController\n                  rgb={rgbValues}\n                  hexCodes={hexCodes}\n                  colorInputsToggle={colorInputsToggle}\n                  submitColorInput={submitColorInput}\n                  displaySavePaletteForm={displaySavePaletteForm}\n                />\n                <RandomizerButton\n                  randomizePalette={randomizePalette}\n                  randomizeWithInput={getColorsWithInput}\n                />\n                <AddMyOwnColors toggleColorInputs={toggleColorInputs} />\n                {showUserForm && (\n                  <SavePaletteForm\n                    savePalette={savePalette}\n                    setShowUserForm={setShowUserForm}\n                  />\n                )}\n              </Fragment>\n            )}\n          />\n        )}\n        <Route\n          exact\n          path=\"/user-favorites\"\n          render={() => <User userFavorites={userFavorites} />}\n        />\n      </main>\n    </Router>\n  );\n};\n\nexport default App;\n",["49","50"],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/apiCalls.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/ColorCard/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/CardController/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/RandomizerButton/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/AddMyOwnMyColors/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/SavePaletteForm/SavePaletteForm.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/User/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/FavoriteCard/index.js",["51"],"import React, { Fragment } from \"react\";\nimport \"./FavoriteCard.scss\";\n\nconst FavoritePalette = ({ colors, name }) => {\n  return (\n    <section className=\"palettes-wrapper\">\n      <section className=\"favorite-palette-wrapper\">\n        <div\n          className=\"color-window-favorite\"\n          style={{ backgroundColor: colors[0] }}\n        ></div>\n        <div\n          className=\"color-window-favorite\"\n          style={{ backgroundColor: colors[1] }}\n        ></div>\n        <div\n          className=\"color-window-favorite\"\n          style={{ backgroundColor: colors[2] }}\n        ></div>\n        <div\n          className=\"color-window-favorite\"\n          style={{ backgroundColor: colors[3] }}\n        ></div>\n        <div\n          className=\"color-window-favorite\"\n          style={{ backgroundColor: colors[4] }}\n        ></div>\n      </section>\n      <section className=\"palette-name\">\n        <h5>{name}</h5>\n      </section>\n    </section>\n  );\n};\n\nexport default FavoritePalette;\n",{"ruleId":"52","severity":1,"message":"53","line":5,"column":35,"nodeType":"54","messageId":"55","endLine":5,"endColumn":41},{"ruleId":"52","severity":1,"message":"56","line":16,"column":10,"nodeType":"54","messageId":"55","endLine":16,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":42,"column":23,"nodeType":"59","messageId":"60","endLine":42,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":115,"column":32,"nodeType":"63","endLine":115,"endColumn":34,"suggestions":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"52","severity":1,"message":"69","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getColors'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"'Fragment' is defined but never used.",{"desc":"73","fix":"74"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getColors]",{"range":"75","text":"76"},[3089,3091],"[getColors]"]