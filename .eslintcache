[{"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/index.js":"1","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/App/index.js":"2","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/apiCalls.js":"3","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/ColorCard/index.js":"4","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/CardController/index.js":"5","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/RandomizerButton/index.js":"6","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/AddMyOwnMyColors/index.js":"7","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/SavePaletteForm/SavePaletteForm.js":"8"},{"size":239,"mtime":1610569110507,"results":"9","hashOfConfig":"10"},{"size":3983,"mtime":1610861033882,"results":"11","hashOfConfig":"10"},{"size":1060,"mtime":1610820534749,"results":"12","hashOfConfig":"10"},{"size":1477,"mtime":1610844126507,"results":"13","hashOfConfig":"10"},{"size":2065,"mtime":1610860826148,"results":"14","hashOfConfig":"10"},{"size":293,"mtime":1610820534748,"results":"15","hashOfConfig":"10"},{"size":281,"mtime":1610844126504,"results":"16","hashOfConfig":"10"},{"size":646,"mtime":1610862124881,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ln82ec",{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/index.js",[],["37","38"],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/App/index.js",["39","40","41","42","43","44"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.scss\";\nimport { apiCalls } from \"../../apiCalls\";\nimport CardController from \"../CardController\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RandomizerButton from \"../RandomizerButton\";\nimport AddMyOwnColors from \"../AddMyOwnMyColors/index.js\";\nimport SavePaletteForm from \"../SavePaletteForm/SavePaletteForm\";\n\nconst App = () => {\n  const [rgbValues, setRgbValues] = useState(null);\n  const [hexCodes, setHexCodes] = useState(null);\n  const [userInputs, setUserInputs] = useState(null);\n  const [colorInputsToggle, setColorInputsToggle] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [showUserForm, setShowUserForm] = useState(false);\n  const [userFavorites, setUserFavorites] = useState([]);\n\n  const getColors = () => {\n    apiCalls\n      .getRandomPalette()\n      .then((data) => {\n        setRgbValues(data);\n        rgbToHex(data);\n        setUserInputs(data);\n      })\n      .catch((err) => setError(err.message));\n  };\n\n  const getColorsWithInput = (input) => {\n    let colors = [[...input], \"N\", \"N\", \"N\"];\n    apiCalls.getRandomPaletteFromInput(colors).then((data) => {\n      setRgbValues(data);\n      rgbToHex(data);\n    });\n  };\n\n  function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  const rgbToHex = (data) => {\n    const hexCodes = data.map((color) => {\n      const r = color[0];\n      const g = color[1];\n      const b = color[2];\n\n      return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;\n    });\n    setHexCodes(hexCodes);\n    setUserInputs({ ...userInputs, hexCodes: hexCodes });\n  };\n\n  const toggleColorInputs = () => {\n    setColorInputsToggle(!colorInputsToggle);\n  };\n\n  const submitColorInput = (input) => {\n    let validRgb;\n    const rgbSplit = input.split(\",\");\n    const rgbFormat = rgbSplit.map((value) => {\n      return parseInt(value);\n    });\n    if (\n      rgbFormat.length === 3 &&\n      rgbFormat[0] <= 255 &&\n      rgbFormat[1] <= 255 &&\n      rgbFormat[2] <= 255 &&\n      rgbFormat[0] >= 0 &&\n      rgbFormat[1] >= 0 &&\n      rgbFormat[2] >= 0\n    ) {\n      validRgb = true;\n    }\n\n    if (validRgb) {\n      randomizePaletteWithInput(rgbFormat);\n    }\n  };\n\n  const randomizePalette = () => {\n    getColors();\n  };\n\n  const randomizePaletteWithInput = (input) => {\n    getColorsWithInput(input);\n  };\n\n  const displaySavePaletteForm = () => {\n    setShowUserForm(true);\n  };\n\n  const lockCard = () => {\n    //needs to give a class to the ColorCard component to display locked icon\n    //need to create a string for the input that it is locking using the rgb val\n    //needs to utilize the get random with input...\n    //TODO come back to this ... create get random with input string first\n  };\n\n  useEffect(() => getColors(), []);\n\n  return (\n    <Router>\n      <main className=\"App\">\n        <h1>Dream Themes</h1>\n        {rgbValues && hexCodes && (\n          <Route\n            path=\"/colors\"\n            render={() => (\n              <Fragment>\n                <CardController\n                  style={{}}\n                  rgb={rgbValues}\n                  hexCodes={hexCodes}\n                  lockCard={lockCard}\n                  colorInputsToggle={colorInputsToggle}\n                  submitColorInput={submitColorInput}\n                  displaySavePaletteForm={displaySavePaletteForm}\n                />\n                <RandomizerButton\n                  randomizePalette={randomizePalette}\n                  randomizeWithInput={getColorsWithInput}\n                />\n                <AddMyOwnColors toggleColorInputs={toggleColorInputs} />\n              </Fragment>\n            )}\n          />\n        )}\n        {showUserForm && (\n          <Route\n            path=\"/colors/save-palette\"\n            render={() => <SavePaletteForm />}\n          />\n        )}\n      </main>\n    </Router>\n  );\n};\n\nexport default App;\n","/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/apiCalls.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/ColorCard/index.js",[],["45","46"],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/CardController/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/RandomizerButton/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/AddMyOwnMyColors/index.js",[],"/Users/cooperterrones/turing/module3/projects/final-project/color-palate/src/Components/SavePaletteForm/SavePaletteForm.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":5,"column":35,"nodeType":"53","messageId":"54","endLine":5,"endColumn":41},{"ruleId":"51","severity":1,"message":"55","line":15,"column":10,"nodeType":"53","messageId":"54","endLine":15,"endColumn":15},{"ruleId":"51","severity":1,"message":"56","line":17,"column":10,"nodeType":"53","messageId":"54","endLine":17,"endColumn":23},{"ruleId":"51","severity":1,"message":"57","line":17,"column":25,"nodeType":"53","messageId":"54","endLine":17,"endColumn":41},{"ruleId":"58","severity":1,"message":"59","line":40,"column":23,"nodeType":"60","messageId":"61","endLine":40,"endColumn":25},{"ruleId":"62","severity":1,"message":"63","line":101,"column":32,"nodeType":"64","endLine":101,"endColumn":34,"suggestions":"65"},{"ruleId":"47","replacedBy":"66"},{"ruleId":"49","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'userFavorites' is assigned a value but never used.","'setUserFavorites' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getColors'. Either include it or remove the dependency array.","ArrayExpression",["70"],["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [getColors]",{"range":"73","text":"74"},[2880,2882],"[getColors]"]